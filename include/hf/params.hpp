
#pragma once
#include <array>
#include <string>
#include <vector>
#include <openssl/bn.h>
#include <openssl/sha.h>

namespace hf {

// ECCFrog522PP constants (decimal strings)
static const char* const P_DEC =
"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115058039";
static const long A_INT = -9;
static const char* const B_DEC =
"6611391361841958508604524699377447911389994900129754213077683112250964195093882510934154923371011820554254572559896136823993565633006955666197428760619911";
static const char* const N_DEC =
"6864797660130609714981900799081393217269435300143305409394463459185543183397654707839930998069072437178898634323218419738245117910726080434907495541251156283";
static const char* const GX_DEC =
"11483659870055913964623536371313631260976767098619949198405802655079012131788815900015100098140592301158799072401266653548293144687306675149107389798128134";
static const char* const GY_DEC =
"3038694457428442024388132117370677943127343938512113463034318638709600451136325747025138610802391491914091276481105699353919202494902810686593030172286395020";

inline std::array<unsigned char,32> param_hash() {
    // SHA256 over canonical concatenation of decimal strings with '|' separators
    const std::string cat =
        std::string(P_DEC) + "|" +
        std::to_string(A_INT) + "|" +
        std::string(B_DEC) + "|" +
        std::string(N_DEC) + "|" +
        std::string(GX_DEC) + "|" +
        std::string(GY_DEC);
    std::array<unsigned char,32> out{};
    SHA256(reinterpret_cast<const unsigned char*>(cat.data()), cat.size(), out.data());
    return out;
}

} // namespace hf
